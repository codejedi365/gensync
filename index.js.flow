// @flow

opaque type Next = Function | void;
opaque type Yield = mixed;

export type Gensync<Args, Return> = {
  (...args: Args): Handler<Args, Return>,
  sync(...args: Args): Return,
  async(...args: Args): Promise<Return>,
  // ...args: [...Args, Callback]
  errback(...args: any[]): void,
};

export type Handler<Args, Return> = (...args: Args) => Generator<Yield, Return, Next>;
export type Options<Args, Return> = {
  sync: (...args: Args) => Return,
  async: (...args: Args) => Promise<Return>,
  // ...args: [...Args, Callback]
  errback: (...args: any[]) => void,
  arity?: number,
  name?: string,
};

declare module.exports: {
  <Args, Return>(Options<Return> | Handler<Args, Return>): Gensync<Args, Return>,
};
